/*
 * Copyright (c) 2022 by William F. Gilreath (will@zepton.xyz)
 * All rights reserved.
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 3 as published
 * by the Free Software Foundation.  
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 3 for more details. The license is available at the following 
 * link:  https://www.gnu.org/licenses/gpl-3.0.txt.
 *
 */
package xyz.zepton.zeptor.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;

import javax.swing.JFrame;
import javax.swing.WindowConstants;
import javax.swing.JButton;

import javax.swing.JScrollPane;

import xyz.zepton.zeptor.util.IOutput;

@SuppressWarnings("serial")
public class CompilerDialog extends JFrame implements IOutput {

    private static final String EOLN = System.getProperty("line.separator");

    // Variables declaration - do not modify//GEN-BEGIN:variables
 
    private javax.swing.JTextPane jTextArea1;

    /**
     * Creates new form CompilerDialog
     */
    public CompilerDialog() {
        initComponents();

        //center dialog on screen
        Dimension d1 = this.getSize();
        Dimension d2 = Toolkit.getDefaultToolkit().getScreenSize();
        int w1 = (int) d1.getWidth();
        int h1 = (int) d1.getHeight();
        int w2 = (int) d2.getWidth();
        int h2 = (int) d2.getHeight();
        this.setLocation(new Point((w2 - w1) / 2, (h2 - h1) / 2));
        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

    }

    public CompilerDialog(final String title) {
        this();
        this.setTitle(title);
    }

    private final void append(final String str) {

        String text = jTextArea1.getText();

        jTextArea1.setText(text + str);

    }//end append

    public synchronized void closeWindow() {

        this.setVisible(false); // default behaviour of JFrame	
        this.dispose();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold default state="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextPane();

        JButton jButton1 = new javax.swing.JButton();

        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        Dimension screenDim = Toolkit.getDefaultToolkit().getScreenSize();

        int x = screenDim.width;
        int y = screenDim.height;

        x = (int) (x * 0.50); // 1/2
        y = (int) (y * 0.25); // 1/4

        if (x < 900 || y < 350) {
            x = 900;
            y = 350;
        }//end if

        setPreferredSize(new java.awt.Dimension(x, y));
        jScrollPane1.setAutoscrolls(true);

        jTextArea1.setFont(new java.awt.Font("Courier New", 1, 16)); // NOI18N
        jTextArea1.setForeground(Color.BLACK);
        jTextArea1.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        jTextArea1.setPreferredSize(new java.awt.Dimension(850, 300));
        jTextArea1.setSize(new java.awt.Dimension(450, 100));
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Done");
        
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed();
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                                .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed() {//GEN-FIRST:event_jButton1ActionPerformed

        this.closeWindow();

    }//GEN-LAST:event_jButton1ActionPerformed

    public void print(final String str) {
        this.append(str);
    }

    public void printf(final String fmt, final Object... args) {
        this.print(String.format(fmt, args));
    }

    public void printFailure(final String str) {
        this.append(str);
    }

    public void printfFailure(final String fmt, final Object... args) {

        this.printFailure(String.format(fmt, args));
    }

    public void printfSuccess(final String fmt, final Object... args) {

        this.printSuccess(String.format(fmt, args));
    }

    public void println() {
        this.print(EOLN);
    }

    public void println(final String str) {

        this.print(str);
        this.print(EOLN);
    }

    public void printlnFailure() {
        this.printFailure(EOLN);
    }

    public void printlnFailure(final String str) {

        this.printFailure(str);
        this.printFailure(EOLN);
    }

    public void printlnSuccess() {
        this.printSuccess(EOLN);
    }
    public void printlnSuccess(final String str) {

        this.printSuccess(str);
        this.printSuccess(EOLN);
    }
    public void printSuccess(final String str) {
        this.append(str);
    }

}
